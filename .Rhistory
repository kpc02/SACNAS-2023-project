install.packages("tidyverse")
install.packages("readxl")
install.packages("googlesheets4")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("simonscmap/cmap4r/cmap4r")
library(tidyverse)
library(readxl)
library(cmap4r)
#install.packages("tidyverse")
#install.packages("readxl")
#install.packages("googlesheets4")
#install.packages("devtools")
devtools::install_github("simonscmap/cmap4r/cmap4r")
About RStudio.Version()
About RStudio.Version(R)
install.packages("tidyverse")
install.packages("readxl")
install.packages("googlesheets4")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("simonscmap/cmap4r/cmap4r")
saveRDS(version = 2)
sessionInfo()
#install.packages("tidyverse")
#install.packages("readxl")
#install.packages("googlesheets4")
#install.packages("devtools")
devtools::install_github("simonscmap/cmap4r/cmap4r")
#install.packages("tidyverse")
#install.packages("readxl")
#install.packages("googlesheets4")
install.packages("devtools")
#install.packages("tidyverse")
#install.packages("readxl")
#install.packages("googlesheets4")
#install.packages("devtools")
devtools::install_github("simonscmap/cmap4r/cmap4r")
library(tidyverse)
library(readxl)
library(cmap4r)
library(googlesheets4)
# To set the API authorization key
set_authorization(cmap_key = "d24b5240-ea3a-45bd-8174-fdb7830d805f")
#--------------
# LOAD PAR data
#--------------
googledrive::drive_auth()
gs4_auth(token = googledrive::drive_token())
seaflow.meta <- read_sheet("https://docs.google.com/spreadsheets/d/1Tsi7OWIZWfCQJqLDpId2aG_i-8Cp-p63PYjjvDkOtH4")
read_sfl <- function(x){
df <- read.csv(url(x), sep ="\t") #### this reads the url link u put in read_sfl and separates the string by a tab indentation ####
#parse cruise name and serial number of instrument
exp <- unlist(list(strsplit(sub(".sfl", "", basename(x)),"_"))) #### basename(x) gets rid of everything before cruise name and num of instrument, sub() gets rid of .sfl, strsplit creates strings by separating entire string using '_', bc of creation of new strings it made it into separate list and had to be listed and unlisted (??) ####
#### 130 is version 2 of seaflow instrumnet ####
if(length(exp) > 2) { cruise <- paste(exp[1],exp[2],sep="_")
} else if(length(exp) ==2) cruise <- exp[1]
print(cruise) #### if exp which is cruise name, number, and sometimes another num, is bigger than 2 then it will paste only the first 2 strings to avoid duplication in cruise. if its equal to 2 then just put first string in cruise (?) ####
ship <- as.character(seaflow.meta[which(seaflow.meta$cruise == cruise),'Ship']) #### same thing as Boolean indexing in python (df[df[column == value]]); in seaflow meta df, finds cruise == cruise but its called ship in this case since cruise is for sfl ####
##### cruise is TN397_130, so it finds cruisename within cruise and then finds matching ship ####
df$cruise <- cruise
df$ship <- ship
## $ refers to column like df.whatever
return(df)
}
sfl <- read_sfl("https://raw.githubusercontent.com/seaflow-uw/seaflow-sfl/master/curated/TN397_130_130.sfl")
sfl$DATE <- as.POSIXct(sfl$DATE, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")
sfl %>% group_by(cruise, DATE = cut(DATE, "1 hour")) %>%
summarize(PAR = mean(PAR, na.rm=T)) %>% #### .agg is same as summarize ####
ggplot(aes(as.POSIXct(DATE), PAR)) +
geom_line() +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# PAR unit in microeinstein m^-2 s^-1, converted to einstein m^-2 day^-1 for compatibility with satellite data
# hes overriding the PAR column to convert to new unit
sfl$PAR <- 10^-6 * sfl$PAR * 24 * 60 * 60
# Calculate Daily mean
sfl_daily <- sfl %>% select(cruise, ship, DATE, LAT, LON, PAR) %>%
group_by(cruise, ship, DATE = cut(DATE, breaks = "1 day")) %>%
summarise(min_LAT = min(LAT, na.rm=T),
max_LAT = max(LAT, na.rm=T),
min_LON = min(LON, na.rm=T),
max_LON = max(LON, na.rm=T),
PAR = mean(PAR, na.rm=T)) %>%
mutate(sat_PAR = 0) %>% ### adding sat par column and setting it to zero ####
mutate(DATE = as.Date(DATE)) %>%
arrange(DATE) ### sorts by date ###
# clean up dataset
id <- which(!is.finite(sfl_daily$min_LAT))
if (length(id)!=0) {
sfl_daily <- sfl_daily[-c(id),] #### if there is bad min lat values in id, then it will find everything but the bad values and put it in sfl_daily ####
}
for(i in 1:nrow(sfl_daily)){
print(sfl_daily$DATE[i])
df <- get_spacetime(tableName = "tblModis_PAR",
varName = "PAR",
dt1 = as.character(sfl_daily$DATE[i]),
dt2 = as.character(sfl_daily$DATE[i]),
lat1 = sfl_daily$min_LAT[i],
lat2 = sfl_daily$max_LAT[i],
lon1 = sfl_daily$min_LON[i],
lon2 = sfl_daily$max_LON[i],
depth1 = 0,
depth2 = 10)
sfl_daily$sat_PAR[i] <- mean(df$PAR, na.rm=T)
}
View(sfl_daily)
## troubleshoot and figure out which is what type of PAR data and mess around with plot to get the labels for the right PAR data
sfl_daily <- sfl_daily %>% group_by(cruise) %>%
mutate(correction = median(sat_PAR / PAR, na.rm=T))
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(colour = "red"),size=2, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "blue"), alpha = 0.5) +
geom_point(aes(DATE, PAR * correction,colour = "black") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
source("~/Desktop/kristine/SACNAS-2023-project/PAR_calibration_updated.R")
library(tidyverse)
library(readxl)
library(cmap4r)
library(googlesheets4)
# To set the API authorization key
set_authorization(cmap_key = "d24b5240-ea3a-45bd-8174-fdb7830d805f")
#--------------
# LOAD PAR data
#--------------
googledrive::drive_auth()
gs4_auth(token = googledrive::drive_token())
seaflow.meta <- read_sheet("https://docs.google.com/spreadsheets/d/1Tsi7OWIZWfCQJqLDpId2aG_i-8Cp-p63PYjjvDkOtH4")
read_sfl <- function(x){
df <- read.csv(url(x), sep ="\t") #### this reads the url link u put in read_sfl and separates the string by a tab indentation ####
#parse cruise name and serial number of instrument
exp <- unlist(list(strsplit(sub(".sfl", "", basename(x)),"_"))) #### basename(x) gets rid of everything before cruise name and num of instrument, sub() gets rid of .sfl, strsplit creates strings by separating entire string using '_', bc of creation of new strings it made it into separate list and had to be listed and unlisted (??) ####
#### 130 is version 2 of seaflow instrumnet ####
if(length(exp) > 2) { cruise <- paste(exp[1],exp[2],sep="_")
} else if(length(exp) ==2) cruise <- exp[1]
print(cruise) #### if exp which is cruise name, number, and sometimes another num, is bigger than 2 then it will paste only the first 2 strings to avoid duplication in cruise. if its equal to 2 then just put first string in cruise (?) ####
ship <- as.character(seaflow.meta[which(seaflow.meta$cruise == cruise),'Ship']) #### same thing as Boolean indexing in python (df[df[column == value]]); in seaflow meta df, finds cruise == cruise but its called ship in this case since cruise is for sfl ####
##### cruise is TN397_130, so it finds cruisename within cruise and then finds matching ship ####
df$cruise <- cruise
df$ship <- ship
## $ refers to column like df.whatever
return(df)
}
sfl <- read_sfl("https://raw.githubusercontent.com/seaflow-uw/seaflow-sfl/master/curated/TN397_130_130.sfl")
sfl$DATE <- as.POSIXct(sfl$DATE, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")
sfl %>% group_by(cruise, DATE = cut(DATE, "1 hour")) %>%
summarize(PAR = mean(PAR, na.rm=T)) %>% #### .agg is same as summarize ####
ggplot(aes(as.POSIXct(DATE), PAR)) +
geom_line() +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# PAR unit in microeinstein m^-2 s^-1, converted to einstein m^-2 day^-1 for compatibility with satellite data
# hes overriding the PAR column to convert to new unit
sfl$PAR <- 10^-6 * sfl$PAR * 24 * 60 * 60
# Calculate Daily mean
sfl_daily <- sfl %>% select(cruise, ship, DATE, LAT, LON, PAR) %>%
group_by(cruise, ship, DATE = cut(DATE, breaks = "1 day")) %>%
summarise(min_LAT = min(LAT, na.rm=T),
max_LAT = max(LAT, na.rm=T),
min_LON = min(LON, na.rm=T),
max_LON = max(LON, na.rm=T),
PAR = mean(PAR, na.rm=T)) %>%
mutate(sat_PAR = 0) %>% ### adding sat par column and setting it to zero ####
mutate(DATE = as.Date(DATE)) %>%
arrange(DATE) ### sorts by date ###
# clean up dataset
id <- which(!is.finite(sfl_daily$min_LAT))
if (length(id)!=0) {
sfl_daily <- sfl_daily[-c(id),] #### if there is bad min lat values in id, then it will find everything but the bad values and put it in sfl_daily ####
}
for(i in 1:nrow(sfl_daily)){
print(sfl_daily$DATE[i])
df <- get_spacetime(tableName = "tblModis_PAR",
varName = "PAR",
dt1 = as.character(sfl_daily$DATE[i]),
dt2 = as.character(sfl_daily$DATE[i]),
lat1 = sfl_daily$min_LAT[i],
lat2 = sfl_daily$max_LAT[i],
lon1 = sfl_daily$min_LON[i],
lon2 = sfl_daily$max_LON[i],
depth1 = 0,
depth2 = 10)
sfl_daily$sat_PAR[i] <- mean(df$PAR, na.rm=T)
}
## troubleshoot and figure out which is what type of PAR data and mess around with plot to get the labels for the right PAR data
sfl_daily <- sfl_daily %>% group_by(cruise) %>%
mutate(correction = median(sat_PAR / PAR, na.rm=T))
View(sfl)
sfl %>% group_by(cruise, DATE = cut(DATE, "1 hour")) %>%
summarize(PAR = mean(PAR, na.rm=T)) %>% #### .agg is same as summarize ####
ggplot(aes(as.POSIXct(DATE), PAR)) +
geom_line() +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# PAR unit in microeinstein m^-2 s^-1, converted to einstein m^-2 day^-1 for compatibility with satellite data
# hes overriding the PAR column to convert to new unit
sfl$PAR <- 10^-6 * sfl$PAR * 24 * 60 * 60
sfl <- read_sfl("https://raw.githubusercontent.com/seaflow-uw/seaflow-sfl/master/curated/TN397_130_130.sfl")
sfl %>% group_by(cruise, DATE = cut(DATE, "1 hour")) %>%
summarize(PAR = mean(PAR, na.rm=T)) %>% #### .agg is same as summarize ####
ggplot(aes(as.POSIXct(DATE), PAR)) +
geom_line() +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
read_sfl <- function(x){
df <- read.csv(url(x), sep ="\t") #### this reads the url link u put in read_sfl and separates the string by a tab indentation ####
#parse cruise name and serial number of instrument
exp <- unlist(list(strsplit(sub(".sfl", "", basename(x)),"_"))) #### basename(x) gets rid of everything before cruise name and num of instrument, sub() gets rid of .sfl, strsplit creates strings by separating entire string using '_', bc of creation of new strings it made it into separate list and had to be listed and unlisted (??) ####
#### 130 is version 2 of seaflow instrumnet ####
if(length(exp) > 2) { cruise <- paste(exp[1],exp[2],sep="_")
} else if(length(exp) ==2) cruise <- exp[1]
print(cruise) #### if exp which is cruise name, number, and sometimes another num, is bigger than 2 then it will paste only the first 2 strings to avoid duplication in cruise. if its equal to 2 then just put first string in cruise (?) ####
ship <- as.character(seaflow.meta[which(seaflow.meta$cruise == cruise),'Ship']) #### same thing as Boolean indexing in python (df[df[column == value]]); in seaflow meta df, finds cruise == cruise but its called ship in this case since cruise is for sfl ####
##### cruise is TN397_130, so it finds cruisename within cruise and then finds matching ship ####
df$cruise <- cruise
df$ship <- ship
## $ refers to column like df.whatever
return(df)
}
sfl <- read_sfl("https://raw.githubusercontent.com/seaflow-uw/seaflow-sfl/master/curated/TN397_130_130.sfl")
sfl$DATE <- as.POSIXct(sfl$DATE, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")
sfl %>% group_by(cruise, DATE = cut(DATE, "1 hour")) %>%
summarize(PAR = mean(PAR, na.rm=T)) %>% #### .agg is same as summarize ####
ggplot(aes(as.POSIXct(DATE), PAR)) +
geom_line() +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
View(sfl)
sfl %>% group_by(cruise, DATE = cut(DATE, "1 hour")) %>%
summarize(PAR = mean(PAR, na.rm=T)) %>% #### .agg is same as summarize ####
ggplot(aes(as.POSIXct(DATE), PAR)) +
geom_line() +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
View(sfl)
# PAR unit in microeinstein m^-2 s^-1, converted to einstein m^-2 day^-1 for compatibility with satellite data
# hes overriding the PAR column to convert to new unit
sfl$PAR <- 10^-6 * sfl$PAR * 24 * 60 * 60
# Calculate Daily mean
sfl_daily <- sfl %>% select(cruise, ship, DATE, LAT, LON, PAR) %>%
group_by(cruise, ship, DATE = cut(DATE, breaks = "1 day")) %>%
summarise(min_LAT = min(LAT, na.rm=T),
max_LAT = max(LAT, na.rm=T),
min_LON = min(LON, na.rm=T),
max_LON = max(LON, na.rm=T),
PAR = mean(PAR, na.rm=T)) %>%
mutate(sat_PAR = 0) %>% ### adding sat par column and setting it to zero ####
mutate(DATE = as.Date(DATE)) %>%
arrange(DATE) ### sorts by date ###
View(sfl_daily)
library(tidyverse)
library(readxl)
library(cmap4r)
library(googlesheets4)
# To set the API authorization key
set_authorization(cmap_key = "d24b5240-ea3a-45bd-8174-fdb7830d805f")
#--------------
# LOAD PAR data
#--------------
googledrive::drive_auth()
gs4_auth(token = googledrive::drive_token())
seaflow.meta <- read_sheet("https://docs.google.com/spreadsheets/d/1Tsi7OWIZWfCQJqLDpId2aG_i-8Cp-p63PYjjvDkOtH4")
read_sfl <- function(x){
df <- read.csv(url(x), sep ="\t") #### this reads the url link u put in read_sfl and separates the string by a tab indentation ####
#parse cruise name and serial number of instrument
exp <- unlist(list(strsplit(sub(".sfl", "", basename(x)),"_"))) #### basename(x) gets rid of everything before cruise name and num of instrument, sub() gets rid of .sfl, strsplit creates strings by separating entire string using '_', bc of creation of new strings it made it into separate list and had to be listed and unlisted (??) ####
#### 130 is version 2 of seaflow instrumnet ####
if(length(exp) > 2) { cruise <- paste(exp[1],exp[2],sep="_")
} else if(length(exp) ==2) cruise <- exp[1]
print(cruise) #### if exp which is cruise name, number, and sometimes another num, is bigger than 2 then it will paste only the first 2 strings to avoid duplication in cruise. if its equal to 2 then just put first string in cruise (?) ####
ship <- as.character(seaflow.meta[which(seaflow.meta$cruise == cruise),'Ship']) #### same thing as Boolean indexing in python (df[df[column == value]]); in seaflow meta df, finds cruise == cruise but its called ship in this case since cruise is for sfl ####
##### cruise is TN397_130, so it finds cruisename within cruise and then finds matching ship ####
df$cruise <- cruise
df$ship <- ship
## $ refers to column like df.whatever
return(df)
}
sfl <- read_sfl("https://raw.githubusercontent.com/seaflow-uw/seaflow-sfl/master/curated/TN397_130_130.sfl")
sfl$DATE <- as.POSIXct(sfl$DATE, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")
sfl %>% group_by(cruise, DATE = cut(DATE, "1 hour")) %>%
summarize(PAR = mean(PAR, na.rm=T)) %>% #### .agg is same as summarize ####
ggplot(aes(as.POSIXct(DATE), PAR)) +
geom_line() +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# PAR unit in microeinstein m^-2 s^-1, converted to einstein m^-2 day^-1 for compatibility with satellite data
# hes overriding the PAR column to convert to new unit
sfl$PAR <- 10^-6 * sfl$PAR * 24 * 60 * 60
# Calculate Daily mean
sfl_daily <- sfl %>% select(cruise, ship, DATE, LAT, LON, PAR) %>%
group_by(cruise, ship, DATE = cut(DATE, breaks = "1 day")) %>%
summarise(min_LAT = min(LAT, na.rm=T),
max_LAT = max(LAT, na.rm=T),
min_LON = min(LON, na.rm=T),
max_LON = max(LON, na.rm=T),
PAR = mean(PAR, na.rm=T)) %>%
mutate(sat_PAR = 0) %>% ### adding sat par column and setting it to zero ####
mutate(DATE = as.Date(DATE)) %>%
arrange(DATE) ### sorts by date ###
# clean up dataset
id <- which(!is.finite(sfl_daily$min_LAT))
if (length(id)!=0) {
sfl_daily <- sfl_daily[-c(id),] #### if there is bad min lat values in id, then it will find everything but the bad values and put it in sfl_daily ####
}
for(i in 1:nrow(sfl_daily)){
print(sfl_daily$DATE[i])
df <- get_spacetime(tableName = "tblModis_PAR",
varName = "PAR",
dt1 = as.character(sfl_daily$DATE[i]),
dt2 = as.character(sfl_daily$DATE[i]),
lat1 = sfl_daily$min_LAT[i],
lat2 = sfl_daily$max_LAT[i],
lon1 = sfl_daily$min_LON[i],
lon2 = sfl_daily$max_LON[i],
depth1 = 0,
depth2 = 10)
sfl_daily$sat_PAR[i] <- mean(df$PAR, na.rm=T)
}
## troubleshoot and figure out which is what type of PAR data and mess around with plot to get the labels for the right PAR data
sfl_daily <- sfl_daily %>% group_by(cruise) %>%
mutate(correction = median(sat_PAR / PAR, na.rm=T))
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(colour = "red"),size=2, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "blue"), alpha = 0.5) +
geom_point(aes(DATE, PAR * correction,colour = "black") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# Calculate correction factor for each cruise
calib <- sfl_daily %>% group_by(cruise, ship) %>%
summarize(time = mean(DATE),
correction = round(mean(correction),3)) %>%
arrange(time)
View(calib)
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(colour = "red"),size=2, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "blue"), alpha = 0.5) +
geom_point(aes(DATE, PAR * correction,colour = "green") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(colour = "red"),size=2, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "blue"), alpha = 0.5) +
geom_point(aes(DATE, PAR * correction,colour = "black") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(colour = "pink"),size=2, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "blue"), alpha = 0.5) +
geom_point(aes(DATE, PAR * correction,colour = "black") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(colour = "violet"),size=2, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "blue"), alpha = 0.5) +
geom_point(aes(DATE, PAR * correction,colour = "black") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(colour = "darkblue"),size=2, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "blue"), alpha = 0.5) +
geom_point(aes(DATE, PAR * correction,colour = "black") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(colour = "darkblue"),size=2, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "blue"), alpha = 0.5) +
geom_point(aes(DATE, PAR * correction,colour = "red") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(colour = "darkblue"),size=5, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "blue"), alpha = 0.5) +
geom_point(aes(DATE, PAR * correction,colour = "red") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(color = "darkblue"),size=5, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "blue"), alpha = 0.5) +
geom_point(aes(DATE, PAR * correction,colour = "red") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(color = "red"),size=5, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "blue"), alpha = 0.5) +
geom_point(aes(DATE, PAR * correction,colour = "green") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(color = "red"),size=5, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "blue"), alpha = 0.5, col =1) +
geom_point(aes(DATE, PAR * correction,colour = "green") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(color = "red"),size=5, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "black"), alpha = 0.5, col =1) +
geom_point(aes(DATE, PAR * correction,colour = "green") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(color = "red"),size=3, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "black"), alpha = 0.5, col =1) +
geom_point(aes(DATE, PAR * correction,colour = "green") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(color = "red"),size=2, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "black"), alpha = 0.5, col =1) +
geom_point(aes(DATE, PAR * correction,colour = "green") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
source("~/Desktop/kristine/SACNAS-2023-project/PAR_calibration_updated.R")
View(sfl_daily)
View(sfl_daily)
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(color = "red"),size=2, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "black"), alpha = 0.5, col =1) +
geom_point(aes(DATE, PAR * correction,colour = "green") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
library(tidyverse)
library(readxl)
library(cmap4r)
library(googlesheets4)
# Plot in-situ vs sat PAR
sfl_daily %>% ggplot(aes(DATE, PAR)) +
geom_point(aes(color = "red"),size=2, alpha = 0.5, col = 2)  +
geom_point(aes(DATE, sat_PAR, colour = "black"), alpha = 0.5, col =1) +
geom_point(aes(DATE, PAR * correction,colour = "green") , col = 3, alpha = 0.5) +
labs(x="time", y="Uncalibrated PAR") +
theme_bw() +
facet_wrap(~ cruise, scales="free_x")
# Calculate correction factor for each cruise
calib <- sfl_daily %>% group_by(cruise, ship) %>%
summarize(time = mean(DATE),
correction = round(mean(correction),3)) %>%
arrange(time)
View(calib)
library(tidyverse)
library(readxl)
library(cmap4r)
library(googlesheets4)
# To set the API authorization key
set_authorization(cmap_key = "d24b5240-ea3a-45bd-8174-fdb7830d805f")
#--------------
# LOAD PAR data
#--------------
googledrive::drive_auth()
gs4_auth(token = googledrive::drive_token())
seaflow.meta <- read_sheet("https://docs.google.com/spreadsheets/d/1Tsi7OWIZWfCQJqLDpId2aG_i-8Cp-p63PYjjvDkOtH4")
read_sfl <- function(x){
df <- read.csv(url(x), sep ="\t") #### this reads the url link u put in read_sfl and separates the string by a tab indentation ####
#parse cruise name and serial number of instrument
exp <- unlist(list(strsplit(sub(".sfl", "", basename(x)),"_"))) #### basename(x) gets rid of everything before cruise name and num of instrument, sub() gets rid of .sfl, strsplit creates strings by separating entire string using '_', bc of creation of new strings it made it into separate list and had to be listed and unlisted (??) ####
#### 130 is version 2 of seaflow instrumnet ####
if(length(exp) > 2) { cruise <- paste(exp[1],exp[2],sep="_")
} else if(length(exp) ==2) cruise <- exp[1]
print(cruise) #### if exp which is cruise name, number, and sometimes another num, is bigger than 2 then it will paste only the first 2 strings to avoid duplication in cruise. if its equal to 2 then just put first string in cruise (?) ####
ship <- as.character(seaflow.meta[which(seaflow.meta$cruise == cruise),'Ship']) #### same thing as Boolean indexing in python (df[df[column == value]]); in seaflow meta df, finds cruise == cruise but its called ship in this case since cruise is for sfl ####
##### cruise is TN397_130, so it finds cruisename within cruise and then finds matching ship ####
df$cruise <- cruise
df$ship <- ship
## $ refers to column like df.whatever
return(df)
}
sfl <- read_sfl("https://raw.githubusercontent.com/seaflow-uw/seaflow-sfl/master/curated/TN397_130_130.sfl")
sfl <- read_sfl("https://raw.githubusercontent.com/seaflow-uw/seaflow-sfl/master/curated/TN397_130_130.sfl")
